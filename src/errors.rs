use super::{Decode, Encode};
use ink::env::chain_extension::FromStatusCode;

#[derive(Debug, Copy, Clone, PartialEq, Eq, Encode, Decode)]
#[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]
pub enum NftsError {
    NoPermission,
    UnknownCollection,
    AlreadyExists,
    ApprovalExpired,
    WrongOwner,
    BadWitness,
    CollectionIdInUse,
    ItemsNonTransferable,
    NotDelegate,
    WrongDelegate,
    Unapproved,
    Unaccepted,
    ItemLocked,
    LockedItemAttributes,
    LockedCollectionAttributes,
    LockedItemMetadata,
    LockedCollectionMetadata,
    MaxSupplyReached,
    MaxSupplyLocked,
    MaxSupplyTooSmall,
    UnknownItem,
    UnknownSwap,
    MetadataNotFound,
    AttributeNotFound,
    NotForSale,
    BidTooLow,
    ReachedApprovalLimit,
    DeadlineExpired,
    WrongDuration,
    MethodDisabled,
    WrongSetting,
    InconsistentItemConfig,
    NoConfig,
    RolesNotCleared,
    MintNotStarted,
    MintEnded,
    AlreadyClaimed,
    IncorrectData,
    WrongOrigin,
    WrongSignature,
    IncorrectMetadata,
    MaxAttributesLimitReached,
    WrongNamespace,
    CollectionNotEmpty,
    OriginCannotBeCaller,
    UnknownError,
}

impl FromStatusCode for NftsError {
    fn from_status_code(status_code: u32) -> Result<(), Self> {
        match status_code {
            0 => Ok(()),
            2 => Err(Self::NoPermission),
            3 => Err(Self::UnknownCollection),
            4 => Err(Self::AlreadyExists),
            5 => Err(Self::ApprovalExpired),
            6 => Err(Self::WrongOwner),
            7 => Err(Self::BadWitness),
            8 => Err(Self::CollectionIdInUse),
            9 => Err(Self::ItemsNonTransferable),
            10 => Err(Self::NotDelegate),
            11 => Err(Self::WrongDelegate),
            12 => Err(Self::Unapproved),
            13 => Err(Self::Unaccepted),
            14 => Err(Self::ItemLocked),
            15 => Err(Self::LockedItemAttributes),
            16 => Err(Self::LockedCollectionAttributes),
            17 => Err(Self::LockedItemMetadata),
            18 => Err(Self::LockedCollectionMetadata),
            19 => Err(Self::MaxSupplyReached),
            20 => Err(Self::MaxSupplyLocked),
            21 => Err(Self::MaxSupplyTooSmall),
            22 => Err(Self::UnknownItem),
            23 => Err(Self::UnknownSwap),
            24 => Err(Self::MetadataNotFound),
            25 => Err(Self::AttributeNotFound),
            26 => Err(Self::NotForSale),
            27 => Err(Self::BidTooLow),
            28 => Err(Self::ReachedApprovalLimit),
            29 => Err(Self::DeadlineExpired),
            30 => Err(Self::WrongDuration),
            31 => Err(Self::MethodDisabled),
            32 => Err(Self::WrongSetting),
            33 => Err(Self::InconsistentItemConfig),
            34 => Err(Self::NoConfig),
            35 => Err(Self::RolesNotCleared),
            36 => Err(Self::MintNotStarted),
            37 => Err(Self::MintEnded),
            38 => Err(Self::AlreadyClaimed),
            39 => Err(Self::IncorrectData),
            40 => Err(Self::WrongOrigin),
            41 => Err(Self::WrongSignature),
            42 => Err(Self::IncorrectMetadata),
            43 => Err(Self::MaxAttributesLimitReached),
            44 => Err(Self::WrongNamespace),
            45 => Err(Self::CollectionNotEmpty),
            _ => Err(Self::UnknownError),
        }
    }
}

impl From<scale::Error> for NftsError {
    fn from(_: scale::Error) -> Self {
        panic!("encountered unexpected invalid SCALE encoding")
    }
}
